# Add a select input for the x variable
selectInput("x_variable",
label = "X-Variable",
choices = select_values,
selected = "displ"),
# Add a select input for the y variable
selectInput("y_variable",
label = "Y-Variable",
choices = select_values,
selected = "cyl"),
# Add a sliderInput to set the size of each point
sliderInput("slider", label = "Size of the Point", min = 1, max = 10),
# Add a selectInput that allows you to select a color from a list of choices
selectInput("color",
label = "Color",
choices = list("Red" = "red",
"Blue" = "blue", "Green" = "green")),
# Plot the output with the name "scatter"
plotOutput("scatter")
))
# UI for scatterplot
library(shiny)
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
# Create a shinyUI with a `fluidPage` layout
shinyUI(fluidPage(
# A page header
h1("Car Website"),
# Add a select input for the x variable
selectInput("x_variable",
label = "X-Variable",
choices = select_values,
selected = "displ"),
# Add a select input for the y variable
selectInput("y_variable",
label = "Y-Variable",
choices = select_values,
selected = "cyl"),
# Add a sliderInput to set the size of each point
sliderInput("slider", label = "Size of the Point", min = 1, max = 10),
# Add a selectInput that allows you to select a color from a list of choices
selectInput("color",
label = "Color",
choices = list("Red" = "red",
"Blue" = "blue", "Green" = "green")),
# Plot the output with the name "scatter"
plotOutput("scatter")
))
h1("Car Website")
selectInput("x_variable",
label = "X-Variable",
choices = select_values,
selected = "displ")
# Create a shinyUI with a `fluidPage` layout
shinyUI(fluidPage(
# A page header
h1("Car Website"),
# Add a select input for the x variable
selectInput("x_variable",
label = "X-Variable",
choices = select_values,
selected = "displ"),
# Add a select input for the y variable
selectInput("y_variable",
label = "Y-Variable",
choices = select_values,
selected = "cyl"),
# Add a sliderInput to set the size of each point
sliderInput("slider", label = "Size of the Point", min = 1, max = 10),
# Add a selectInput that allows you to select a color from a list of choices
selectInput("color",
label = "Color",
choices = list("Red" = "red",
"Blue" = "blue", "Green" = "green")),
# Plot the output with the name "scatter"
plotOutput("scatter")
))
?sliderInput
runApp()
# It should take as an input the x_var, y_var, color, and size
# Save the result of `renderPlot` to output$scatter
shinyServer(function(input, output) {
output$scatter <- renderPlot({
# Store x and y values to plot
x <- mpg[[input$x_variable]]
y <- mpg[[input$y_variable]]
# Store the title of the graph in a variable
title <- paste0("MPG Dataset: ",
input$x_variable, " v.s.", input$y_variable)
# Create ggplot scatter
p <- ggplot() +
geom_point(mapping = aes(x = x, y = y),
size = input$slider,
color = input$color) +
labs(x = input$x_var, y = input$y_var, title = title)
p
})
})
# Create a shinyUI with a `fluidPage` layout
shinyUI(fluidPage(
# A page header
h1("Car Website"),
# Add a select input for the x variable
selectInput("x_variable",
label = "X-Variable",
choices = select_values,
selected = "displ"),
# Add a select input for the y variable
selectInput("y_variable",
label = "Y-Variable",
choices = select_values,
selected = "cyl"),
# Add a sliderInput to set the size of each point
sliderInput("slider",
label = "Size of the Point",
min = 1,
max = 10,
value = 5),
# Add a selectInput that allows you to select a color from a list of choices
selectInput("color",
label = "Color",
choices = list("Red" = "red",
"Blue" = "blue", "Green" = "green")),
# Plot the output with the name "scatter"
plotOutput("scatter")
))
# Create a shinyUI with a `fluidPage` layout
shinyUI(fluidPage(
# A page header
h1("Car Website"),
# Add a select input for the x variable
selectInput("x_variable",
label = "X-Variable",
choices = select_values,
selected = "displ"),
# Add a select input for the y variable
selectInput("y_variable",
label = "Y-Variable",
choices = select_values,
selected = "cyl"),
# Add a sliderInput to set the size of each point
sliderInput("slider",
label = "Size of the Point",
min = 1,
max = 10,
value = 5),
# Add a selectInput that allows you to select a color from a list of choices
selectInput("color",
label = "Color",
choices = list("Red" = "red",
"Blue" = "blue", "Green" = "green")),
# Plot the output with the name "scatter"
plotOutput("scatter")
))
# It should take as an input the x_var, y_var, color, and size
# Save the result of `renderPlot` to output$scatter
shinyServer(function(input, output) {
output$scatter <- renderPlot({
# Store x and y values to plot
x <- mpg[[input$x_variable]]
y <- mpg[[input$y_variable]]
# Store the title of the graph in a variable
title <- paste0("MPG Dataset: ",
input$x_variable, " v.s.", input$y_variable)
# Create ggplot scatter
p <- ggplot() +
geom_point(mapping = aes(x = x, y = y),
size = input$slider,
color = input$color) +
labs(x = input$x_var, y = input$y_var, title = title)
p
})
})
# Create a shinyUI with a `fluidPage` layout
shinyUI(fluidPage(
# A page header
h1("Car Website"),
# Add a select input for the x variable
selectInput("x_variable",
label = "X-Variable",
choices = select_values,
selected = "displ"),
# Add a select input for the y variable
selectInput("y_variable",
label = "Y-Variable",
choices = select_values,
selected = "cyl"),
# Add a sliderInput to set the size of each point
sliderInput("slider",
label = "Size of the Point",
min = 1,
max = 10,
value = 5),
# Add a selectInput that allows you to select a color from a list of choices
selectInput("color",
label = "Color",
choices = list("Red" = "red",
"Blue" = "blue", "Green" = "green")),
# Plot the output with the name "scatter"
plotOutput("scatter")
))
# Create a shinyUI with a `fluidPage` layout
shinyUI(fluidPage(
# A page header
h1("Car Website"),
# Add a select input for the x variable
selectInput("x_variable",
label = "X-Variable",
choices = select_values,
selected = "displ"),
# Add a select input for the y variable
selectInput("y_variable",
label = "Y-Variable",
choices = select_values,
selected = "cyl"),
# Add a sliderInput to set the size of each point
sliderInput("slider",
label = "Size of the Point",
min = 1,
max = 10,
value = 5),
# Add a selectInput that allows you to select a color from a list of choices
selectInput("color",
label = "Color",
choices = list("Red" = "red",
"Blue" = "blue", "Green" = "green")),
# Plot the output with the name "scatter"
plotOutput("scatter")
))
runApp()
runApp()
runApp('~/Desktop/INFO 201/ch16-shiny/exercise-5')
runApp('~/Desktop/INFO 201/ch16-shiny/exercise-5')
runApp('~/Desktop/INFO 201/ch16-shiny/exercise-5')
runApp('~/Desktop/INFO 201/ch16-shiny/exercise-5')
runApp('~/Desktop/INFO 201/ch16-shiny/exercise-5')
install.packages("rsconnect")
install.packages("rsconnect")
library(rsconnect)
tabPanel(
"Tristan's Plot",
titlePanel("Check out this Plot"),
sidebarLayout(
sidebarPanel(
selectedInput(
"plot",
label = "This is plot",
choices = p
)
)
),
mainPanel(
plotlyOutput(p)
)
)
rsconnect::setAccountInfo(name='tingoldingold',
token='70BF008053E56E7B41DBF7402D6E5C2E',
secret='<SECRET>')
rsconnect::setAccountInfo(name='tingoldingold',
token='70BF008053E56E7B41DBF7402D6E5C2E',
secret='<SECRET>')
rsconnect::setAccountInfo(name='tingoldingold',
token='70BF008053E56E7B41DBF7402D6E5C2E',
secret='ScWc6cFlE7Ul50uFDgz5XdABmQoju19YPgT8jXgn')
shiny::runApp()
runApp()
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
# UI for scatterplot
library(shiny)
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
# It should take as an input the x_var, y_var, color, and size
# Save the result of `renderPlot` to output$scatter
shinyServer(function(input, output) {
output$scatter <- renderPlot({
# Store x and y values to plot
x <- mpg[[input$x_variable]]
y <- mpg[[input$y_variable]]
# Store the title of the graph in a variable
title <- paste0("MPG Dataset: ",
input$x_variable, " v.s.", input$y_variable)
# Create ggplot scatter
p <- ggplot() +
geom_point(mapping = aes(x = x, y = y),
size = input$slider,
color = input$color) +
labs(x = input$x_var, y = input$y_var, title = title)
p
})
})
# It should take as an input the x_var, y_var, color, and size
# Save the result of `renderPlot` to output$scatter
shinyServer(function(input, output) {
output$scatter <- renderPlot({
# Store x and y values to plot
x <- mpg[[input$x_variable]]
y <- mpg[[input$y_variable]]
# Store the title of the graph in a variable
title <- paste0("MPG Dataset: ",
input$x_variable, " v.s.", input$y_variable)
# Create ggplot scatter
p <- ggplot() +
geom_point(mapping = aes(x = x, y = y),
size = input$slider,
color = input$color) +
labs(x = input$x_var, y = input$y_var, title = title)
p
})
})
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
setwd("~/Documents/IS Classes/IS 451")
# Read Data in
delays.df <- read.csv("FlightDelays.csv")
bank.df <- delays.df[rowSums(is.na(delays.df)) == 0,]
# Examine the Structure
str(delays.df)
delays.df <- delays.df[rowSums(is.na(delays.df)) == 0,]
delays.df$DAY_WEEK <- factor(delays.df$DAY_WEEK, levels = c(1:7),
labels = c("Mon", "Tue", "Wed", "Thu", "Fri",
"Sat", "Sun"))
delays.df$CRS_DEP_TIME <- factor(round(delays.df$CRS_DEP_TIME/100))
# Create reference categories (Base Level)
delays.df$ORIGIN <- relevel(delays.df$ORIGIN, ref = "IAD")
delays.df$DEST <- relevel(delays.df$DEST, ref = "LGA")
delays.df$CARRIER <- relevel(delays.df$CARRIER, ref = "US")
delays.df$DAY_WEEK <- relevel(delays.df$DAY_WEEK, ref = "Mon")
# Create the target variable
delays.df$isDelay <- as.numeric(delays.df$Flight.Status == "delayed")
# Partitioning the dataset
set.seed(5)
selected.var <- c(10, 1, 8, 4, 2, 9, 14)
train.index <- sample(1:nrow(delays.df), nrow(delays.df)*0.6)
train.df <- delays.df[train.index, selected.var]
valid.df <- delays.df[-train.index, selected.var]
logit.reg <- glm(isDelay ~ ., data = train.df, family = "binomial")
summary(logit.reg)
# set the cutoff to be 0.5 and evaluate the model
## use predict() with type = "response" to compute predicted probabilities
logit.reg.pred <- predict(logit.reg, valid.df, type = "response")
# Choose cutoff value and evaluate classification performance
pred <- ifelse(logit.reg.pred > 0.5, 1, 0)
library(caret)
library(lattice)
library(ggplot2)
library(dplyr)
confusionMatrix(factor(pred), factor(valid.df$isDelay))
confusionMatrix(factor(pred), factor(valid.df$isDelay))$overall[1]
class(train.df$isDelay)
## first 5 actual and predicted records
data.frame(actual = valid.df$isDelay[1:5], predicted = pred[1:5])
train.pred <- ifelse(logit.reg$fitted.values > 0.5, 1, 0)
confusionMatrix(factor(train.pred), factor(train.df$isDelay))
confusionMatrix(factor(train.pred), factor(train.df$isDelay))$overall[1]
pred <- ifelse(logit.reg.pred > 0.2, 1, 0)
confusionMatrix(factor(pred), factor(valid.df$isDelay))
train.pred <- ifelse(logit.reg$fitted.values > 0.2, 1, 0)
confusionMatrix(factor(train.pred), factor(train.df$isDelay))$overall[1]
setwd("~/Desktop/INFO 201/a7-collaboration-JYCestelle")
#---- Read in the data
survey_info <- read.csv("data/intro-survey.csv", stringsAsFactors = FALSE)
View(survey_info)
colnames(survey_info)
#---- Read in the data
dataset <- read.csv("data/intro-survey.csv", stringsAsFactors = FALSE)
ggplot(data = dataset)
colnames(dataset)
col_names <- colnames(dataset)
ggplot(data = dataset) +
geom_point(mapping = aes(x = col_names[3], y = col_names[14]))
ggplot(data = dataset) +
geom_bar(mapping = aes(x = col_names[3])
}
ggplot(data = dataset) +
geom_bar(mapping = aes(x = col_names[3]))
col_names <- colnames(dataset)
dataset$What.operating.system.do.you.typically.use. <-
factor(dataset$What.operating.system.do.you.typically.use., levels = c(1:2),
labels = c("Windows", "Mac"))
ggplot(data = dataset) +
geom_bar(mapping = aes(x = col_names[3]))
ggplot(data = dataset) +
geom_bar(mapping = aes(x = dataset$What.operating.system.do.you.typically.use.))
dataset$What.operating.system.do.you.typically.use. <-
factor(dataset$What.operating.system.do.you.typically.use., levels = c(1:2),
labels = c("Windows", "Mac"))
ggplot(data = dataset) +
geom_bar(mapping = aes(x = dataset$What.operating.system.do.you.typically.use.))
source("clean-data.R")
source("scripts/clean-data.R")
source("./scripts/clean-data.R")
source("./scripts/clean-data.R")
View(clean_intro_survey)
seahawk_fan <- dataset %>%
group_by(seahawk_fan)
seahawk_fan <- dataset %>%
group_by(seahawk_fan)
chart_2 <- function(dataset) {
seahawk_fan <- dataset %>%
group_by(seahawk_fan)
}
source('~/Desktop/INFO 201/a7-collaboration-JYCestelle/scripts/chart1.R')
source('~/Desktop/INFO 201/a7-collaboration-JYCestelle/scripts/chart1.R')
chart_2 <- function(dataset) {
seahawk_fan <- dataset %>%
group_by(seahawk_fan)
View(seahawk_fan)
}
chart_2(clean_intro_survey)
chart_2 <- function(dataset) {
seahawk <- dataset %>%
group_by(seahawks_fan)
View(seahawk)
}
chart_2(clean_intro_survey)
chart_2 <- function(dataset) {
seahawk <- dataset %>%
select(seahawks_fan)
View(seahawk)
}
chart_2(clean_intro_survey)
chart_2 <- function(dataset) {
seahawk <- dataset %>%
select(seahawks_fan)
View(seahawk)
ggplot(data = seahawk) +
geom_bar(mapping = aes(x = seahawks_fan))
}
chart_2(clean_intro_survey)
chart_2 <- function(dataset) {
seahawk <- dataset %>%
select(seahawks_fan)
View(seahawk)
ggplot(data = seahawk) +
geom_bar(mapping = aes(x = seahawks_fan)) +
labs(
title = "Seahawks Fan",
x = "Count",
y = "Are you a Seahawks Fan?"
)
}
chart_2(clean_intro_survey)
chart_2 <- function(dataset) {
seahawk <- dataset %>%
select(seahawks_fan)
ggplot(data = seahawk) +
geom_bar(mapping = aes(x = seahawks_fan)) +
labs(
title = "Seahawks Fan",
y = "Count",
x = "Are you a Seahawks Fan?"
)
}
chart_2(clean_intro_survey)
library(RColorBrewer)
chart_2 <- function(dataset) {
seahawk <- dataset %>%
select(seahawks_fan)
ggplot(data = seahawk) +
geom_bar(mapping = aes(x = seahawks_fan)) +
scale_color_brewer(palette = "Set3") +
labs(
title = "Seahawks Fan",
y = "Count",
x = "Are you a Seahawks Fan?"
)
}
chart_2(clean_intro_survey)
chart_2 <- function(dataset) {
seahawk <- dataset %>%
select(seahawks_fan)
ggplot(data = seahawk) +
geom_bar(mapping = aes(x = seahawks_fan, fill = seahawks_fan)) +
labs(
title = "Seahawks Fan",
y = "Count",
x = "Are you a Seahawks Fan?"
)
}
chart_2(clean_intro_survey)
chart_2 <- function(dataset) {
seahawk <- dataset %>%
select(seahawks_fan)
ggplot(data = seahawk) +
geom_bar(mapping = aes(x = seahawks_fan, fill = seahawks_fan)) +
labs(
title = "Seahawks Fan",
y = "Count",
x = "Are you a Seahawks Fan?",
color = "Fan Type"
)
}
chart_2(clean_intro_survey)
chart_2 <- function(dataset) {
seahawk <- dataset %>%
select(seahawks_fan)
ggplot(data = seahawk) +
geom_bar(mapping = aes(x = seahawks_fan, fill = seahawks_fan)) +
labs(
title = "Seahawks Fan",
y = "Count",
x = "Are you a Seahawks Fan?",
fill = "Fan Type"
)
}
chart_2(clean_intro_survey)
project <- read.csv("ks-projects-201612.csv")
data <- read.csv("ks-projects-201612.csv")
setwd("~/Desktop/INFO 201/INFO_Group_Collab")
data <- read.csv("data/ks-projects-201612.csv")
View(data)
