review.df[is.na(review.df)] <- 0
#----Read in and partition the data
train.index <- sample(1:nrow(review.df), nrow(review.df)*0.6)
train.df <- review.df[train.index, ]
valid.df <- review.df[-train.index, ]
names(review.df)
#----Normalize the data
train.norm.df <- train.df
valid.norm.df <- valid.df
review.norm.df <- review.df
norm.values <- preProcess(train.df[, 1:6], method=c("center", "scale"))
train.norm.df[, 1:6] <- predict(norm.values, train.df[, 1:6])
valid.norm.df[, 1:6] <- predict(norm.values, valid.df[, 1:6])
review.norm.df[, 1:6] <- predict(norm.values, review.df[, 1:6])
#----Find accuracy
accuracy.df <- data.frame(k = 1:5, accuracy = rep(0, 5))
#----Compute the knn
for(i in 1:5) {
knn.pred <- knn(train.norm.df[, 1:6], valid.norm.df[, 1:6],
cl = train.norm.df[, 7], k = i)
confusionMatrix(knn.pred, valid.norm.df[, 7])
accuracy.df[i, 2] <- confusionMatrix(knn.pred, valid.norm.df[, 7])$overall[1]
}
accuracy.df
#---- Predict with new values
new.df <- data.frame(CRIM = 0.2, ZN = 0, INDUS = 7, CHAS = 0, NOX = 0.538,
RM = 6, AGE = 62, DIS = 4.7, RAD = 4, TAX = 307,
PTRATIO = 21, LSTAT = 10)
#----Compute the knn
for(i in 1:5) {
knn.pred <- knn(train.norm.df[, 1:6], valid.norm.df[, 1:6],
cl = train.norm.df[, 7], k = i)
confusionMatrix(knn.pred, valid.norm.df[, 7])
accuracy.df[i, 2] <- confusionMatrix(knn.pred, valid.norm.df[, 7])$overall[1]
}
accuracy.df
knn.pred <- knn(train.norm.df[, 1:6], valid.norm.df[, 1:6],
cl = train.norm.df[, 7], k = i)
confusionMatrix(knn.pred, valid.norm.df[, 7])
accuracy.df[i, 2] <- confusionMatrix(knn.pred, valid.norm.df[, 7])$overall[1]
#---- Read and View the Data
gun.df <- read.csv("gun-violence-data_01-2013_03-2018.csv")
#---- Construct the data set
use_gun.df <- gun.df %>%
mutate(death_occured = n_killed > 0)
use_gun.df$death_occured <- as.integer(as.logical(use_gun.df$death_occured))
use <- c(11, 15, 17, 18, 28, 29, 30)
review.df <- use_gun.df[c(1:50000), use]
View(review.df)
review.df[is.na(review.df)] <- 0
#----Read in and partition the data
train.index <- sample(1:nrow(review.df), nrow(review.df)*0.6)
train.df <- review.df[train.index, ]
valid.df <- review.df[-train.index, ]
names(review.df)
#----Normalize the data
train.norm.df <- train.df
valid.norm.df <- valid.df
review.norm.df <- review.df
norm.values <- preProcess(train.df[, 1:6], method=c("center", "scale"))
train.norm.df[, 1:6] <- predict(norm.values, train.df[, 1:6])
valid.norm.df[, 1:6] <- predict(norm.values, valid.df[, 1:6])
review.norm.df[, 1:6] <- predict(norm.values, review.df[, 1:6])
#----Find accuracy
accuracy.df <- data.frame(k = 1:5, accuracy = rep(0, 5))
#----Compute the knn
for(i in 1:5) {
knn.pred <- knn(train.norm.df[, 1:6], valid.norm.df[, 1:6],
cl = train.norm.df[, 7], k = i)
confusionMatrix(knn.pred, valid.norm.df[, 7])
accuracy.df[i, 2] <- confusionMatrix(knn.pred, valid.norm.df[, 7])$overall[1]
}
accuracy.df
knn.pred <- knn(train.norm.df[, 1:6], valid.norm.df[, 1:6],
cl = train.norm.df[, 7], k = i)
confusionMatrix(knn.pred, valid.norm.df[, 7])
accuracy.df[i, 2] <- confusionMatrix(knn.pred, valid.norm.df[, 7])$overall[1]
data = na.omit(data)
#----Read in and partition the data
train.index <- sample(1:nrow(review.df), nrow(review.df)*0.6)
train.df <- review.df[train.index, ]
valid.df <- review.df[-train.index, ]
names(review.df)
#----Normalize the data
train.norm.df <- train.df
valid.norm.df <- valid.df
review.norm.df <- review.df
norm.values <- preProcess(train.df[, 1:6], method=c("center", "scale"))
train.norm.df[, 1:6] <- predict(norm.values, train.df[, 1:6])
valid.norm.df[, 1:6] <- predict(norm.values, valid.df[, 1:6])
review.norm.df[, 1:6] <- predict(norm.values, review.df[, 1:6])
#----Find accuracy
accuracy.df <- data.frame(k = 1:5, accuracy = rep(0, 5))
#----Compute the knn
for(i in 1:5) {
knn.pred <- knn(train.norm.df[, 1:6], valid.norm.df[, 1:6],
cl = train.norm.df[, 7], k = i)
confusionMatrix(knn.pred, valid.norm.df[, 7])
accuracy.df[i, 2] <- confusionMatrix(knn.pred, valid.norm.df[, 7])$overall[1]
}
accuracy.df
knn.pred <- knn(train.norm.df[, 1:6], valid.norm.df[, 1:6],
cl = train.norm.df[, 7], k = i)
confusionMatrix(knn.pred, valid.norm.df[, 7])
accuracy.df[i, 2] <- confusionMatrix(knn.pred, valid.norm.df[, 7])$overall[1]
use <- c(11, 15, 18, 28, 29, 30)
review.df <- use_gun.df[c(1:50000), use]
View(review.df)
review.df[is.na(review.df)] <- 0
#----Read in and partition the data
train.index <- sample(1:nrow(review.df), nrow(review.df)*0.6)
train.df <- review.df[train.index, ]
valid.df <- review.df[-train.index, ]
names(review.df)
#----Normalize the data
train.norm.df <- train.df
valid.norm.df <- valid.df
review.norm.df <- review.df
norm.values <- preProcess(train.df[, 1:6], method=c("center", "scale"))
train.norm.df[, 1:6] <- predict(norm.values, train.df[, 1:6])
valid.norm.df[, 1:6] <- predict(norm.values, valid.df[, 1:6])
review.norm.df[, 1:6] <- predict(norm.values, review.df[, 1:6])
#----Find accuracy
accuracy.df <- data.frame(k = 1:5, accuracy = rep(0, 5))
#----Compute the knn
for(i in 1:5) {
knn.pred <- knn(train.norm.df[, 1:6], valid.norm.df[, 1:6],
cl = train.norm.df[, 7], k = i)
confusionMatrix(knn.pred, valid.norm.df[, 7])
accuracy.df[i, 2] <- confusionMatrix(knn.pred, valid.norm.df[, 7])$overall[1]
}
#----Normalize the data
train.norm.df <- train.df
valid.norm.df <- valid.df
review.norm.df <- review.df
norm.values <- preProcess(train.df[, 1:5], method=c("center", "scale"))
train.norm.df[, 1:5] <- predict(norm.values, train.df[, 1:5])
valid.norm.df[, 1:5] <- predict(norm.values, valid.df[, 1:5])
review.norm.df[, 1:5] <- predict(norm.values, review.df[, 1:5])
#----Find accuracy
accuracy.df <- data.frame(k = 1:5, accuracy = rep(0, 5))
#----Compute the knn
for(i in 1:5) {
knn.pred <- knn(train.norm.df[, 1:5], valid.norm.df[, 1:5],
cl = train.norm.df[, 6], k = i)
confusionMatrix(knn.pred, valid.norm.df[, 6])
accuracy.df[i, 2] <- confusionMatrix(knn.pred, valid.norm.df[, 6])$overall[1]
}
accuracy.df
knn.pred <- knn(train.norm.df[, 1:5], valid.norm.df[, 1:5],
cl = train.norm.df[, 6], k = i)
confusionMatrix(knn.pred, valid.norm.df[, 6])
table(factor(pred, levels=min(test):max(test)), factor(test, levels=min(test):max(test)))
#---- Read and View the Data
gun.df <- read.csv("gun-violence-data_01-2013_03-2018.csv")
#---- Construct the data set
use_gun.df <- gun.df %>%
mutate(death_occured = n_killed > 0)
use_gun.df$death_occured <- as.integer(as.logical(use_gun.df$death_occured))
use <- c(11, 15, 17, 18, 28, 29, 30)
review.df <- use_gun.df[c(1:50000), use]
View(review.df)
review.df[is.na(review.df)] <- 0
data = na.omit(data)
#----Read in and partition the data
train.index <- sample(1:nrow(review.df), nrow(review.df)*0.6)
train.df <- review.df[train.index, ]
valid.df <- review.df[-train.index, ]
names(review.df)
#----Normalize the data
train.norm.df <- train.df
valid.norm.df <- valid.df
review.norm.df <- review.df
norm.values <- preProcess(train.df[, 1:6], method=c("center", "scale"))
train.norm.df[, 1:6] <- predict(norm.values, train.df[, 1:6])
valid.norm.df[, 1:6] <- predict(norm.values, valid.df[, 1:6])
review.norm.df[, 1:6] <- predict(norm.values, review.df[, 1:6])
#----Find accuracy
accuracy.df <- data.frame(k = 1:5, accuracy = rep(0, 5))
accuracy.df
table(factor(pred, levels=min(test):max(test)), factor(test, levels=min(test):max(test)))
knn.pred <- knn(train.norm.df[, 1:6], valid.norm.df[, 1:6],
cl = train.norm.df[, 7], k = i)
confusionMatrix(knn.pred, valid.norm.df[, 7])
confusionMatrix(knn.pred, train.norm.df[, 7])
confusionMatrix(knn.pred, train.norm.df[, 1:6])
table(knn.pred, train.norm.df[, 7])
length(knn.pred)
length(valid.norm.df)
length(valid.df)
length(train.df)
View(train.df)
View(valid.df)
View(valid.norm.df)
View(knn.pred)
names(review.df)
knn.pred <- knn(train.norm.df[, 1:6], valid.norm.df[, 1:6],
cl = valid.norm.df[, 7], k = i)
knn.pred <- knn(train.norm.df[, 1:6], valid.norm.df[, 1:6],
cl = train.norm.df[, 7], k = i)
housing.df <- read.csv("Housing.csv")
setwd("~/Documents/IS Classes/IS 451")
library(rpart)
library(rpart.plot)
library(ggplot2)
library(stringr)
library(forecast)
library(caret)
library(FNN)
housing.df <- read.csv("Housing.csv")
View(housing.df)
set.seed(5)
#----Read in and partition the data
train.index <- sample(1:nrow(housing.df), nrow(housing.df)*0.6)
train.df <- housing.df[train.index, ]
valid.df <- housing.df[-train.index, ]
names(housing.df)
#----Normalize the data
train.norm.df <- train.df
valid.norm.df <- valid.df
housing.norm.df <- housing.df
norm.values <- preProcess(train.df[, 1:12], method=c("center", "scale"))
train.norm.df[, 1:12] <- predict(norm.values, train.df[, 1:12])
valid.norm.df[, 1:12] <- predict(norm.values, valid.df[, 1:12])
housing.norm.df[, 1:12] <- predict(norm.values, housing.df[, 1:12])
#----Find accuracy
accuracy.df <- data.frame(k = 1:5, accuracy = rep(0, 5))
#----Compute the knn
for(i in 1:5) {
knn.pred <- knn(train.norm.df[, 1:12], valid.norm.df[, 1:12],
cl = train.norm.df[, 14], k = i)
confusionMatrix(knn.pred, valid.norm.df[, 14])
accuracy.df[i, 2] <- confusionMatrix(knn.pred, valid.norm.df[, 14])$overall[1]
}
inspect(knn.pred)
library(rpart)
library(rpart.plot)
library(ggplot2)
library(stringr)
library(forecast)
library(caret)
library(FNN)
#---- Read and View the Data
gun.df <- read.csv("gun-violence-data_01-2013_03-2018.csv")
#---- Construct the data set
use_gun.df <- gun.df %>%
mutate(death_occured = n_killed > 0)
use_gun.df$death_occured <- as.integer(as.logical(use_gun.df$death_occured))
setwd("~/Documents/IS Classes/IS 451/Project ")
#---- Read and View the Data
gun.df <- read.csv("gun-violence-data_01-2013_03-2018.csv")
use <- c(11, 15, 17, 18, 28, 29, 30)
review.df <- use_gun.df[c(1:50000), use]
View(review.df)
review.df[is.na(review.df)] <- 0
data = na.omit(data)
#----Read in and partition the data
train.index <- sample(1:nrow(review.df), nrow(review.df)*0.6)
train.df <- review.df[train.index, ]
valid.df <- review.df[-train.index, ]
names(review.df)
#----Normalize the data
train.norm.df <- train.df
valid.norm.df <- valid.df
review.norm.df <- review.df
norm.values <- preProcess(train.df[, 1:6], method=c("center", "scale"))
train.norm.df[, 1:6] <- predict(norm.values, train.df[, 1:6])
valid.norm.df[, 1:6] <- predict(norm.values, valid.df[, 1:6])
review.norm.df[, 1:6] <- predict(norm.values, review.df[, 1:6])
#----Find accuracy
accuracy.df <- data.frame(k = 1:5, accuracy = rep(0, 5))
valid.norm.df$death_occured <- factor(valid.norm.df$death_occured)
#----Compute the knn
for(i in 1:5) {
knn.pred <- knn(train.norm.df[, 1:6], valid.norm.df[, 1:6],
cl = train.norm.df[, 7], k = i)
confusionMatrix(knn.pred, valid.norm.df[, 7])
accuracy.df[i, 2] <- confusionMatrix(knn.pred, valid.norm.df[, 7])$overall[1]
}
accuracy.df
#----Find accuracy
accuracy.df <- data.frame(k = 1:3, accuracy = rep(0, 5))
valid.norm.df$death_occured <- factor(valid.norm.df$death_occured)
#----Find accuracy
accuracy.df <- data.frame(k = 1:3, accuracy = rep(0, 3))
valid.norm.df$death_occured <- factor(valid.norm.df$death_occured)
#----Compute the knn
for(i in 1:5) {
knn.pred <- knn(train.norm.df[, 1:6], valid.norm.df[, 1:6],
cl = train.norm.df[, 7], k = i)
confusionMatrix(knn.pred, valid.norm.df[, 7])
accuracy.df[i, 2] <- confusionMatrix(knn.pred, valid.norm.df[, 7])$overall[1]
}
accuracy.df
#----Compute the knn
for(i in 1:3) {
knn.pred <- knn(train.norm.df[, 1:6], valid.norm.df[, 1:6],
cl = train.norm.df[, 7], k = i)
confusionMatrix(knn.pred, valid.norm.df[, 7])
accuracy.df[i, 2] <- confusionMatrix(knn.pred, valid.norm.df[, 7])$overall[1]
}
accuracy.df
#----Find accuracy
accuracy.df <- data.frame(k = 1:5, accuracy = rep(0, 5))
valid.norm.df$death_occured <- factor(valid.norm.df$death_occured)
#----Compute the knn
for(i in 1:5) {
knn.pred <- knn(train.norm.df[, 1:6], valid.norm.df[, 1:6],
cl = train.norm.df[, 7], k = i)
confusionMatrix(knn.pred, valid.norm.df[, 7])
accuracy.df[i, 2] <- confusionMatrix(knn.pred, valid.norm.df[, 7])$overall[1]
}
accuracy.df
knn.pred <- knn(train.norm.df[, 1:6], valid.norm.df[, 1:6],
cl = train.norm.df[, 7], k = 4)
confusionMatrix(knn.pred, valid.norm.df[, 7])
accuracy.df[i, 2] <- confusionMatrix(knn.pred, valid.norm.df[, 7])$overall[1]
accuracy.df[i, 2]
setwd("~/Desktop/INFO 201/INFO_Group_Collab")
# Build the plot based on the data set
ggplot(data = dataset) +
geom_bar(mapping = aes(x = main_category, fill = state), position = "fill") +
coord_flip() +
labs(
title = "Status of Projects by Catagory",
y = "Project Count",
x = "Main Category",
fill = "Status"
) +
scale_fill_manual(values=c("#4155f4", "#f44141", "#1fb70b"))
shiny::runApp()
dataset <- read.csv("./data/ks-projects-201612.csv", stringsAsFactors = FALSE)
dataset$usd.pledged <- as.integer(dataset$usd.pledged)
dataset <- dataset %>%
filter(state == "successful") %>%
filter(currency == "USD") %>%
filter(launched > "2016-01-01")
# Build the plot based on the data set
ggplot(data = dataset) +
geom_point(mapping = aes(x = main_category, y = Average))
View(dataset)
# Build the plot based on the data set
ggplot(data = dataset) +
geom_point(mapping = aes(x = main_category, y = currency))
# Build the plot based on the data set
ggplot(data = dataset) +
geom_point(mapping = aes(x = main_category, y = usd.pledged))
dataset <- dataset %>%
filter(state == "successful") %>%
filter(currency == "USD") %>%
filter(launched > "2016-01-01") %>%
group_by(main_category)
# Build the plot based on the data set
ggplot(data = dataset) +
geom_bar(mapping = aes(x = main_category, y = usd.pledged))
# Build the plot based on the data set
ggplot(data = dataset) +
geom_bar(mapping = aes(x = main_category, y = usd.pledged) stat = "identity")
# Build the plot based on the data set
ggplot(data = dataset) +
geom_bar(mapping = aes(x = main_category, y = usd.pledged), stat = "identity")
options("scipen"=999, "digits"=3)
# Build the plot based on the data set
ggplot(data = dataset) +
geom_bar(mapping = aes(x = main_category, y = usd.pledged), stat = "identity")
# Build the plot based on the data set
ggplot(data = dataset) +
geom_bar(mapping = aes(x = main_category, y = usd.pledged),
stat = "identity") +
coord_flip() +
labs(
title = "Dollars Pledged to Successful Projects in the United States",
x = "Main Category",
y = "US Dollars Pledged"
) +
scale_fill_manual(values=c("#4155f4", "#f44141", "#1fb70b"))
# Build the plot based on the data set
ggplot(data = dataset) +
geom_bar(mapping = aes(x = main_category, fill = state), position = "fill", color = blue) +
coord_flip() +
labs(
title = "Status of Projects by Catagory",
y = "Project Count",
x = "Main Category",
fill = "Status"
) +
}
# Build the plot based on the data set
ggplot(data = dataset) +
geom_bar(mapping = aes(x = main_category, fill = state), position = "fill", color = blue) +
coord_flip() +
labs(
title = "Status of Projects by Catagory",
y = "Project Count",
x = "Main Category",
fill = "Status"
)
# Build the plot based on the data set
ggplot(data = dataset) +
geom_bar(mapping = aes(x = main_category, fill = state), position = "fill", color = "blue") +
coord_flip() +
labs(
title = "Status of Projects by Catagory",
y = "Project Count",
x = "Main Category",
fill = "Status"
)
# Build the plot based on the data set
ggplot(data = dataset) +
geom_bar(mapping = aes(x = main_category, y = usd.pledged, fill = main_category),
stat = "identity") +
coord_flip() +
labs(
title = "Dollars Pledged to Successful Projects in the United States",
x = "Main Category",
y = "US Dollars Pledged"
) +
scale_fill_manual(values=c("#4155f4", "#f44141", "#1fb70b"))
# Build the plot based on the data set
ggplot(data = dataset) +
geom_bar(mapping = aes(x = main_category, y = usd.pledged, fill = main_category),
stat = "identity") +
coord_flip() +
labs(
title = "Dollars Pledged to Successful Projects in the United States",
x = "Main Category",
y = "US Dollars Pledged"
)
# Build the plot based on the data set
ggplot(data = dataset) +
geom_bar(mapping = aes(x = main_category, y = usd.pledged, fill = main_category),
stat = "identity") +
coord_flip() +
labs(
title = "Dollars Pledged to Successful Projects in the United States",
x = "Main Category",
y = "US Dollars Pledged"
) +
guides(fill=FALSE)
runApp()
runApp()
runApp()
runApp()
dataset <- read.csv("./data/ks-projects-201612.csv", stringsAsFactors = FALSE)
View(dataset)
# Manipulate our dataset
dataset <- dataset %>%
filter(state == "successful") %>%
select(main_category, state, backers)
# Manipulate our dataset
dataset <- dataset %>%
filter(state == "successful") %>%
select(main_category, state, backers) %>%
group_by(main_category)
# Build the plot based on the data set
ggplot(data = dataset) +
geom_bar(mapping = aes(x = main_category, y = backers), stat = "identity") +
coord_flip() +
labs(
title = "Status of Projects by Catagory",
y = "Project Count",
x = "Main Category",
fill = "Status"
) +
scale_fill_manual(values=c("#4155f4", "#f44141", "#1fb70b"))
# Build the plot based on the data set
ggplot(data = dataset) +
geom_bar(mapping = aes(x = main_category, y = backers), stat = "identity") +
coord_flip() +
labs(
title = "Status of Projects by Catagory",
y = "Project Count",
x = "Main Category",
fill = "Status"
)
# Build the plot based on the data set
ggplot(data = dataset) +
geom_bar(mapping = aes(x = main_category, y = backers), stat = "identity") +
coord_flip() +
labs(
title = "Number of Backers by Category",
y = "Backers",
x = "Main Category"
)
# Build the plot based on the data set
ggplot(data = dataset) +
geom_bar(mapping = aes(x = main_category, y = backers, fill = "main_category"), stat = "identity") +
coord_flip() +
labs(
title = "Number of Backers by Category",
y = "Backers",
x = "Main Category"
) +
guides(fill=FALSE)
runApp()
runApp()
#dataset <- read.csv("./data/ks-projects-201612.csv", stringsAsFactors = FALSE)
# Manipulate our dataset
dataset <- dataset %>%
filter(state == "successful") %>%
group_by(main_category)
# Build the plot based on the data set
ggplot(data = dataset) +
geom_bar(mapping = aes(x = main_category, y = backers,
fill = "main_category"), stat = "identity") +
coord_flip() +
labs(
title = "Number of Backers by Category",
y = "Backers",
x = "Main Category"
) +
guides(fill=FALSE)
