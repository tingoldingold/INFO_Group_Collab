# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches)
total <- feet + (inches / 12) * 0.3048
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 11)
print(height_in_meters)
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(num) {
num + 3
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches)
total <- feet + (inches / 12) * 0.3048
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 11)
print(height_in_meters)
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(num) {
num + 3
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches)
total <- feet + (inches / 12) * 0.3048
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 11)
print(height_in_meters)
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(num) {
num + 3
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches)
total <- feet + (inches / 12) * 0.3048
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 11)
print(height_in_meters)
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(num) {
num + 3
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches)
total <- feet + (inches / 12) * 0.3048
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 11)
print(height_in_meters)
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(num) {
num + 3
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches)
total <- feet + (inches / 12) * 0.3048
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 11)
print(height_in_meters)
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(num) {
num + 3
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches)
total <- feet + (inches / 12) * 0.3048
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 11)
print(height_in_meters)
setwd("~/Desktop/INFO 201/INFO_Group_Collab")
shiny::runApp()
runApp()
runApp()
setwd("~/Documents/IS Classes/IS 451")
#---- Read Data In
breast_cancer.df <- read.csv("breastcancer.csv")
#---- Normalization
norm.values <- preProcess(breast_cancer.df, method = c("center", "scale"))
library(stringr)
library(caret)
library(lattice)
library(ggplot2)
#---- Normalization
norm.values <- preProcess(breast_cancer.df, method = c("center", "scale"))
norm.breast_cancer.df <- predict(norm.values, breast_cancer.df)
#---- Set Seed
set.seed(111)
km <- kmeans(norm.breast_cancer.df, 3)
#---- Set Seed
set.seed(111)
km <- kmeans(norm.breast_cancer.df, 3)
View(breast_cancer.df)
View(norm.breast_cancer.df)
library(stringr)
library(caret)
library(lattice)
library(ggplot2)
#---- Set Seed
set.seed(111)
km <- kmeans(norm.breast_cancer.df, 3)
View(breast_cancer.df)
data.class(breast_cancer.df)
data.class(colnames(breast_cancer.df))
data.class(breast_cancer.df$Clump.Thickness)
data.class(breast_cancer.df$Uniformity.of.Cell.Size)
norm.breast_cancer.df <- norm.breast_cancer.df[apply(sapply(norm.breast_cancer.df, is.finite), 1, all),]
#---- Set Seed
set.seed(111)
km <- kmeans(norm.breast_cancer.df, 3)
#---- Normalization
norm.values <- preProcess(breast_cancer.df, method = c("center", "scale"))
norm.breast_cancer.df <- predict(norm.values, breast_cancer.df)
#---- Set Seed
set.seed(111)
km <- kmeans(norm.breast_cancer.df, 3)
dem(breast_cancer.df)
str(breast_cancer.df)
# load data
utilities.df <- read.csv("Utilities.csv")
View(utilities.df)
breast_cancer.df <- breast_cancer.df[-breast_cancer.df$Diagnosis]
breast_cancer.df <- breast_cancer.df[, -breast_cancer.df$Diagnosis]
breast_cancer.df <- breast_cancer.df[-10]
View(breast_cancer.df)
#---- Normalization
norm.values <- preProcess(breast_cancer.df, method = c("center", "scale"))
norm.breast_cancer.df <- predict(norm.values, breast_cancer.df)
#---- Set Seed
set.seed(111)
km <- kmeans(norm.breast_cancer.df, 3)
#---- Cluster
cluster <- km$cluster
cluster
#---- Centeroids
cneters <- km$centers
#---- within-cluster sum of squared distances
withiness <- km$withinss
#---- total within-cluster sum of square
tot_within <- km$tot.withinss
#---- Give number of values within each k-value
size <- km$size
cneters
#---- Read Data In
breast_cancer.df <- read.csv("breastcancer.csv", stringsAsFactors = FALSE)
#---- Normalization
norm.values <- preProcess(breast_cancer.df, method = c("center", "scale"))
norm.breast_cancer.df <- predict(norm.values, breast_cancer.df)
#---- Set Seed
set.seed(111)
km <- kmeans(norm.breast_cancer.df, 3)
#---- Read Data In
breast_cancer.df <- read.csv("breastcancer.csv", stringsAsFactors = FALSE)
data.class(breast_cancer.df)
data.class(breast_cancer.df$dim)
data.class(breast_cancer.df$Diagnosis)
as.int(breast_cancer.df$Diagnosis)
as.numeric(breast_cancer.df$Diagnosis)
View(breast_cancer.df)
cluster
library(dplyr)
#---- Column at the end
breast_cancer.df <- breast_cancer.df %>%
mutate(diagnosis =  Diagnosis == "malignant")
breast_cancer.df$diagnosis <- as.integer(as.logical(breast_cancer.df$diagnosis))
breast_cancer.df <- breast_cancer.df[-10]
#---- Normalization
norm.values <- preProcess(breast_cancer.df, method = c("center", "scale"))
norm.breast_cancer.df <- predict(norm.values, breast_cancer.df)
#---- Set Seed
set.seed(111)
km <- kmeans(norm.breast_cancer.df, 3)
#---- Cluster
cluster <- km$cluster
#---- Centeroids
cneters <- km$centers
#---- within-cluster sum of squared distances
withiness <- km$withinss
#---- total within-cluster sum of square
tot_within <- km$tot.withinss
#---- Give number of values within each k-value
size <- km$size
cluster
cneters
#----Partition the Data
train.index <- sample(1:nrow(breast_cancer.df), nrow(breast_cancer.df)*0.6)
train.df <- delays.df[train.index, selected.var]
valid.df <- delays.df[-train.index, selected.var]
#----Partition the Data
train.index <- sample(1:nrow(breast_cancer.df), nrow(breast_cancer.df)*0.7)
train.df <- delays.df[train.index, selected.var]
#----Partition the Data
train.index <- sample(1:nrow(breast_cancer.df), nrow(breast_cancer.df)*0.7)
train.df <- breast_cancer.df[train.index, selected.var]
#----Partition the Data
train.index <- sample(1:nrow(breast_cancer.df), nrow(breast_cancer.df)*0.7)
train.df <- breast_cancer.df[train.index, ]
valid.df <- breast_cancer.df[-train.index, ]
#---- Centeroids
cneters <- km$centers
cneters
withiness
#---- Run Logistical Regression Model
logit.reg <- glm(diagnosis ~ ., data = train.df, family = "binomial")
summary(logit.reg)
#---- Choose a Cut-off
pred <- ifelse(logit.reg.pred > 0.5, 1, 0)
logit.reg.pred <- predict(logit.reg, valid.df, type = "response")
#---- Choose a Cut-off
pred <- ifelse(logit.reg.pred > 0.5, 1, 0)
#---- Confusion Matrix
confusionMatrix(factor(pred), factor(valid.df$diagnosis))
confusionMatrix(factor(pred), factor(valid.df$diagnosis))$overall[1]
#---- Choose a Cut-off
pred <- ifelse(logit.reg.pred > 0.6, 1, 0)
#---- Confusion Matrix
confusionMatrix(factor(pred), factor(valid.df$diagnosis))
confusionMatrix(factor(pred), factor(valid.df$diagnosis))$overall[1]
#---- Choose a Cut-off
pred <- ifelse(logit.reg.pred > 0.7, 1, 0)
#---- Confusion Matrix
confusionMatrix(factor(pred), factor(valid.df$diagnosis))
confusionMatrix(factor(pred), factor(valid.df$diagnosis))$overall[1]
#---- Choose a Cut-off
pred <- ifelse(logit.reg.pred > 0.3, 1, 0)
#---- Confusion Matrix
confusionMatrix(factor(pred), factor(valid.df$diagnosis))
confusionMatrix(factor(pred), factor(valid.df$diagnosis))$overall[1]
#---- Choose a Cut-off
pred <- ifelse(logit.reg.pred > 0.2, 1, 0)
#---- Confusion Matrix
confusionMatrix(factor(pred), factor(valid.df$diagnosis))
confusionMatrix(factor(pred), factor(valid.df$diagnosis))$overall[1]
#---- Choose a Cut-off
pred <- ifelse(logit.reg.pred > 0.1, 1, 0)
#---- Confusion Matrix
confusionMatrix(factor(pred), factor(valid.df$diagnosis))
confusionMatrix(factor(pred), factor(valid.df$diagnosis))$overall[1]
setwd("~/Desktop/INFO 201/INFO_Group_Collab")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Desktop/INFO 201/INFO_Group_Collab")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Documents/IS Classes/IS 451")
source('~/.active-rstudio-document')
class(train.df$diagnosis)
confusionMatrix(factor(pred), factor(valid.df$diagnosis))$overall[1]
#---- Give number of values within each k-value
size <- km$size
cneters
cluster
setwd("~/Desktop/INFO 201/INFO_Group_Collab")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(caret)
library(lattice)
library(ggplot2)
library(dplyr)
setwd("~/Documents/IS Classes/IS 451")
library(caret)
library(lattice)
library(ggplot2)
library(dplyr)
sys_admin.df <- read.csv("SystemAdministrators.csv", stringsAsFactors = FALSE)
sys_admin.df$Completed.task <- as.integer(as.logical(sys_admin.df$Completed.task))
View(sys_admin.df)
sys_admin.df <- sys_admin.df %>%
mutate(Completed.task =  Completed.task == "Yes")
sys_admin.df$Completed.task <- as.integer(as.logical(sys_admin.df$Completed.task))
View(sys_admin.df)
sys_admin.df <- read.csv("SystemAdministrators.csv", stringsAsFactors = FALSE)
sys_admin.df <- sys_admin.df %>%
mutate(completed.task =  Completed.task == "Yes")
sys_admin.df$Completed.task <- as.integer(as.logical(sys_admin.df$Completed.task))
View(sys_admin.df)
sys_admin.df$Completed.task <- as.integer(as.logical(sys_admin.df$Completed.task))
sys_admin.df <- read.csv("SystemAdministrators.csv", stringsAsFactors = FALSE)
sys_admin.df <- sys_admin.df %>%
mutate(completed.task =  Completed.task == "Yes")
sys_admin.df$completed.task <- as.integer(as.logical(sys_admin.df$completed.task))
sys_admin.df <- sys_admin.df[-3]
set.seed(22)
train.index <- sample(1:nrow(sys_admin.df), nrow(sys_admin.df)*0.6)
train.df <- sys_admin.df[train.index, ]
valid.df <- sys_admin.df[-train.index, ]
set.seed(22)
train.index <- sample(1:nrow(sys_admin.df), nrow(sys_admin.df)*0.7)
train.df <- sys_admin.df[train.index, ]
valid.df <- sys_admin.df[-train.index, ]
logit.reg <- glm(completed.task ~ ., data = train.df, family = "binomial")
summary(logit.reg)
logit.reg.pred <- predict(logit.reg, valid.df, type = "response")
pred <- ifelse(logit.reg.pred > 0.5, 1, 0)
confusionMatrix(factor(pred), factor(valid.df$isDelay))
confusionMatrix(factor(pred), factor(valid.df$isDelay))$overall[1]
confusionMatrix(factor(pred), factor(valid.df$completed.task))
confusionMatrix(factor(pred), factor(valid.df$completed.task))$overall[1]
summary(logit.reg)
2/23
pred <- ifelse(logit.reg.pred > 0.7, 1, 0)
confusionMatrix(factor(pred), factor(valid.df$completed.task))
confusionMatrix(factor(pred), factor(valid.df$completed.task))$overall[1]
market.df <- read.csv("internet_marketing.csv", stringsAsFactors = FALSE)
source('~/.active-rstudio-document')
View(market.df)
#---- Normalization
norm.values <- preProcess(market.df, method = c("center", "scale"))
norm.market.df <- predict(norm.values, market.df)
km <- kmeans(norm.market.df, 3)
View(norm.market.df)
market.df <- market.df[-c(1:2)]
#---- Normalization
norm.values <- preProcess(market.df, method = c("center", "scale"))
norm.market.df <- predict(norm.values, market.df)
#---- Set Seed
set.seed(12345)
km <- kmeans(norm.market.df, 3)
#---- Cluster
cluster <- km$cluster
#---- Centeroids
cneters <- km$centers
#---- within-cluster sum of squared distances
withiness <- km$withinss
#---- total within-cluster sum of square
tot_within <- km$tot.withinss
#---- Give number of values within each k-value
size <- km$size
cluster
cneters
source('~/Documents/IS Classes/IS 451/text_mining.R')
source('~/Documents/IS Classes/IS 451/text_mining_self.R')
?Corpus
inspect(tdm)
?tdm
?dtm
??dtm
??tdm
?DocumentTermMatrix
inspect(tfidf)
?weightTfIdf
#---- Get a vector of sentences
text <- c("About 90% of all movies you see in cinemas are dull.",
"This movie is dull. The     worst movie       ever.",
"The scariest movie I ever watched!!")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
sys_admin.df <- read.csv("SystemAdministrators.csv", stringsAsFactors = FALSE)
sys_admin.df <- read.csv("SystemAdministrators.csv", stringsAsFactors = FALSE)
sys_admin.df$Completed.task <- as.numeric(sys_admin.df$Completed.task == "Yes")
View(sys_admin.df)
new.df <- data.frame(Experience = 10.3, Training = 4)
prob <- predict(reg, new.df, type = "response")
prob <- predict(logit.reg, new.df, type = "response")
source('~/Documents/IS Classes/IS 451/Final_Prac_Logit_Reg.R')
source('~/Documents/IS Classes/IS 451/Final_Prac_Logit_Reg.R')
source('~/Documents/IS Classes/IS 451/Final_Prac_Logit_Reg.R')
source('~/Documents/IS Classes/IS 451/Final_Prac_Logit_Reg.R')
prob
confusionMatrix(factor(pred), factor(train.df$Completed.task))
confusionMatrix(factor(pred), factor(train.df$Completed.task))$overall[1]
logit.reg <- glm(Completed.task ~ ., data = train.df, family = "binomial")
confusionMatrix(factor(pred), factor(train.df$Completed.task))
train.df <- sys_admin.df[train.index, ]
valid.df <- sys_admin.df[-train.index, ]
logit.reg <- glm(Completed.task ~ ., data = train.df, family = "binomial")
summary(logit.reg)
logit.reg.pred <- predict(logit.reg, valid.df, type = "response")
pred <- ifelse(logit.reg.pred > 0.7, 1, 0)
confusionMatrix(factor(pred), factor(train.df$Completed.task))
confusionMatrix(factor(pred), factor(train.df$Completed.task))$overall[1]
logit.reg <- glm(Completed.task ~ ., data = train.df, family = "binomial")
summary(logit.reg)
logit.reg.pred <- predict(logit.reg, train.df, type = "response")
pred <- ifelse(logit.reg.pred > 0.7, 1, 0)
confusionMatrix(factor(pred), factor(train.df$Completed.task))
confusionMatrix(factor(pred), factor(train.df$Completed.task))$overall[1]
pred <- ifelse(logit.reg.pred > 0.5, 1, 0)
confusionMatrix(factor(pred), factor(train.df$Completed.task))
confusionMatrix(factor(pred), factor(train.df$Completed.task))$overall[1]
setwd("~/Desktop/INFO 201/INFO_Group_Collab")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
read.csv("ks-projects-201612.csv")
read.csv("data/ks-projects-201612.csv")
View(read.csv("data/ks-projects-201612.csv"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
