tmp <- createDistributionPlot(kickstarter)
tmp
# createSuccessPlot returns a plot based on the given dataset and the queried day
createDistributionPlot <- function(dataset) {
# Manipulate our dataset to contain weekdays and the number of projects that
# became successful that were launched on those weekdays
dataset <- select(dataset, goal, usd.pledged) %>%
mutate(percent_reached = getPercent(usd.pledged, goal)) %>%
select(percent_reached) %>%
filter(!is.na(percent_reached) & percent_reached > 0)
View(dataset)
# Build the plot based on the data set
plot <- ggplot(data = dataset, aes(dataset$percent_reached)) +
geom_histogram(binwidth = 10)
return(plot)
}
tmp <- createDistributionPlot(kickstarter)
getPercent <- function(pledge, goal) {
tmp <- as.numeric(pledge) / as.numeric(goal)
tmp <- as.integer(1000 * tmp) / 10
print(typeof(tmp))
return(tmp)
}
tmp <- createDistributionPlot(kickstarter)
getPercent <- function(pledge, goal) {
tmp <- as.numeric(pledge) / as.numeric(goal)
tmp <- as.integer(1000 * tmp) / 10
if(tmp > 100) {
tmp <- 100
}
return(tmp)
}
kickstarter <- read.csv(file="./data/ks-projects-201612.csv",
stringsAsFactors = FALSE)
tmp <- createDistributionPlot(kickstarter)
# createSuccessPlot returns a plot based on the given dataset and the queried day
createDistributionPlot <- function(dataset) {
# Manipulate our dataset to contain weekdays and the number of projects that
# became successful that were launched on those weekdays
dataset <- select(dataset, goal, usd.pledged) %>%
mutate(percent_reached = getPercent(usd.pledged, goal)) %>%
select(percent_reached) %>%
filter(!is.na(percent_reached) & percent_reached > 0)
View(dataset)
# Build the plot based on the data set
plot <- ggplot(data = dataset, aes(dataset$percent_reached)) +
geom_histogram(binwidth = 10)
return(plot)
}
source('C:/Users/Soham/Desktop/info201/INFO_Group_Collab/scripts/renderDistributionPlot.R')
getPercent <- function(pledge, goal) {
tmp <- as.numeric(pledge) / as.numeric(goal)
tmp <- as.integer(1000 * tmp) / 10
print(tmp)
return(tmp)
}
tmp <- createDistributionPlot(kickstarter)
# createSuccessPlot returns a plot based on the given dataset and the queried day
createDistributionPlot <- function(dataset) {
# Manipulate our dataset to contain weekdays and the number of projects that
# became successful that were launched on those weekdays
dataset <- select(dataset, goal, usd.pledged) %>%
mutate(percent_reached = getPercent(usd.pledged, goal)) %>%
select(percent_reached) %>%
filter(!is.na(percent_reached)) %>%
filter(percent_reached > 0)
View(dataset)
# Build the plot based on the data set
plot <- ggplot(data = dataset, aes(dataset$percent_reached)) +
geom_histogram(binwidth = 10)
return(plot)
}
getPercent <- function(pledge, goal) {
tmp <- as.numeric(pledge) / as.numeric(goal)
tmp <- as.integer(1000 * tmp) / 10
print(tmp)
return(tmp)
}
tmp <- createDistributionPlot(kickstarter)
# createSuccessPlot returns a plot based on the given dataset and the queried day
createDistributionPlot <- function(dataset) {
# Manipulate our dataset to contain weekdays and the number of projects that
# became successful that were launched on those weekdays
dataset <- select(dataset, goal, usd.pledged) %>%
mutate(percent_reached = getPercent(usd.pledged, goal)) %>%
select(percent_reached) %>%
filter(!is.na(percent_reached), percent_reached > 0)
View(dataset)
# Build the plot based on the data set
plot <- ggplot(data = dataset, aes(dataset$percent_reached)) +
geom_histogram(binwidth = 10)
return(plot)
}
getPercent <- function(pledge, goal) {
tmp <- as.numeric(pledge) / as.numeric(goal)
tmp <- as.integer(1000 * tmp) / 10
print(tmp)
return(tmp)
}
kickstarter <- read.csv(file="./data/ks-projects-201612.csv",
stringsAsFactors = FALSE)
tmp <- createDistributionPlot(kickstarter)
tmp <- min(tmp, 100)
getPercent <- function(pledge, goal) {
tmp <- as.numeric(pledge) / as.numeric(goal)
tmp <- as.integer(1000 * tmp) / 10
tmp <- min(tmp, 100)
print(tmp)
return(tmp)
}
tmp <- createDistributionPlot(kickstarter)
getPercent <- function(pledge, goal) {
tmp <- as.numeric(pledge) / as.numeric(goal)
tmp <- as.integer(1000 * tmp) / 10
print(tmp)
return(tmp)
}
if(tmp > 100) {
tmp <- 100
}
getPercent <- function(pledge, goal) {
tmp <- as.numeric(pledge) / as.numeric(goal)
tmp <- as.integer(1000 * tmp) / 10
if(tmp > 100) {
tmp <- 100
}
print(tmp)
return(tmp)
}
tmp <- createDistributionPlot(kickstarter)
# createSuccessPlot returns a plot based on the given dataset and the queried day
createDistributionPlot <- function(dataset) {
# Manipulate our dataset to contain weekdays and the number of projects that
# became successful that were launched on those weekdays
dataset <- select(dataset, goal, usd.pledged) %>%
filter(!is.na(goal), goal > 0) %>%
filter(!is.na(usd.pledged)) %>%
mutate(percent_reached = getPercent(usd.pledged, goal)) %>%
select(percent_reached) %>%
View(dataset)
# Build the plot based on the data set
plot <- ggplot(data = dataset, aes(dataset$percent_reached)) +
geom_histogram(binwidth = 10)
return(plot)
}
tmp <- createDistributionPlot(kickstarter)
print(typeof(tmp))
print(typeof(pledge))
getPercent <- function(pledge, goal) {
print(typeof(pledge))
tmp <- as.numeric(pledge) / as.numeric(goal)
tmp <- as.integer(1000 * tmp) / 10
print(typeof(tmp))
return(tmp)
}
tmp <- createDistributionPlot(kickstarter)
getPercent <- function(pledge, goal) {
print(typeof(pledge))
print(typeof(goal))
tmp <- as.numeric(pledge) / as.numeric(goal)
tmp <- as.integer(1000 * tmp) / 10
print(typeof(tmp))
return(tmp)
}
kickstarter <- read.csv(file="./data/ks-projects-201612.csv",
stringsAsFactors = FALSE)
tmp <- createDistributionPlot(kickstarter)
source('C:/Users/Soham/Desktop/info201/INFO_Group_Collab/scripts/renderDistributionPlot.R')
test <- createDistributionPlot(kickstarter)
getPercent <- function(pledge, goal) {
tmp <- as.numeric(pledge) / as.numeric(goal)
tmp <- as.integer(1000 * tmp) / 10
print(tmp)
return(tmp)
}
test <- createDistributionPlot(kickstarter)
# createSuccessPlot returns a plot based on the given dataset and the queried day
createDistributionPlot <- function(dataset) {
# Manipulate our dataset to contain weekdays and the number of projects that
# became successful that were launched on those weekdays
dataset <- select(dataset, goal, usd.pledged) %>%
filter(!is.na(goal), goal > 0) %>%
filter(!is.na(usd.pledged)) %>%
mutate(percent_reached = getPercent(usd.pledged, goal)) %>%
select(percent_reached) %>%
filter(!is.na(percent_reached))
View(dataset)
# Build the plot based on the data set
plot <- ggplot(data = dataset, aes(dataset$percent_reached)) +
geom_histogram(binwidth = 10)
return(plot)
}
test <- createDistributionPlot(kickstarter)
getPercent <- function(pledge, goal) {
tmp <- as.numeric(pledge) / as.numeric(goal)
tmp <- as.integer(1000 * tmp) / 10
if(is.na(tmp)) {
print("cat")
}
return(tmp)
}
test <- createDistributionPlot(kickstarter)
source('C:/Users/Soham/Desktop/info201/INFO_Group_Collab/scripts/renderDistributionPlot.R')
getPercent <- function(pledge, goal) {
tmp <- as.numeric(pledge) / as.numeric(goal)
tmp <- as.integer(1000 * tmp) / 10
if(any(is.na(tmp))) {
print("cat")
}
return(tmp)
}
test <- createDistributionPlot(kickstarter)
getPercent <- function(pledge, goal) {
tmp <- as.numeric(pledge) / as.numeric(goal)
tmp <- as.integer(1000 * tmp) / 10
print(typeof(tmp))
return(tmp)
}
test <- createDistributionPlot(kickstarter)
typeof(9)
getPercent <- function(pledge, goal) {
print(paste(pledge, goal))
tmp <- as.numeric(pledge) / as.numeric(goal)
tmp <- as.integer(1000 * tmp) / 10
return(tmp)
}
test <- createDistributionPlot(kickstarter)
# createSuccessPlot returns a plot based on the given dataset and the queried day
createDistributionPlot <- function(dataset) {
# Manipulate our dataset to contain weekdays and the number of projects that
# became successful that were launched on those weekdays
dataset <- select(dataset, goal, usd.pledged) %>%
filter(is.numeric(goal), is.numeric(usd.pledged)) %>%
mutate(percent_reached = getPercent(usd.pledged, goal)) %>%
select(percent_reached)
View(dataset)
# Build the plot based on the data set
plot <- ggplot(data = dataset, aes(dataset$percent_reached)) +
geom_histogram(binwidth = 10)
return(plot)
}
getPercent <- function(pledge, goal) {
print(paste(pledge, goal))
tmp <- as.numeric(pledge) / as.numeric(goal)
tmp <- as.integer(1000 * tmp) / 10
return(tmp)
}
test <- createDistributionPlot(kickstarter)
is.numeric(3)
is.numeric("3")
is.numeric(as.numeric("3"))
is.numeric(as.numeric("f"))
check.numeric("3")
as.numeric("f")
# createSuccessPlot returns a plot based on the given dataset and the queried day
createDistributionPlot <- function(dataset) {
# Manipulate our dataset to contain weekdays and the number of projects that
# became successful that were launched on those weekdays
dataset <- select(dataset, goal, usd.pledged) %>%
filter(!is.na(is.numeric(goal)), !is.na(is.numeric(usd.pledged))) %>%
mutate(percent_reached = getPercent(usd.pledged, goal)) %>%
select(percent_reached)
View(dataset)
# Build the plot based on the data set
plot <- ggplot(data = dataset, aes(dataset$percent_reached)) +
geom_histogram(binwidth = 10)
return(plot)
}
getPercent <- function(pledge, goal) {
print(paste(pledge, goal))
tmp <- as.numeric(pledge) / as.numeric(goal)
tmp <- as.integer(1000 * tmp) / 10
return(tmp)
}
kickstarter <- read.csv(file="./data/ks-projects-201612.csv",
stringsAsFactors = FALSE)
test <- createDistributionPlot(kickstarter)
getPercent <- function(pledge, goal) {
print(paste(pledge, goal))
tmp <- as.numeric(pledge) / as.numeric(goal)
tmp <- as.integer(1000 * tmp) / 10
tmp <- min(tmp, 100)
return(tmp)
}
test <- createDistributionPlot(kickstarter)
print(typeof(tmp))
getPercent <- function(pledge, goal) {
print(paste(pledge, goal))
tmp <- as.numeric(pledge) / as.numeric(goal)
tmp <- as.integer(1000 * tmp) / 10
print(typeof(tmp))
tmp <- min(tmp, 100)
return(tmp)
}
test <- createDistributionPlot(kickstarter)
?replace
getPercent <- function(pledge, goal) {
print(paste(pledge, goal))
tmp <- as.numeric(pledge) / as.numeric(goal)
tmp <- as.integer(1000 * tmp) / 10
print(paste(tmp, typeof(tmp)))
return(tmp)
}
test <- createDistributionPlot(kickstarter)
# createSuccessPlot returns a plot based on the given dataset and the queried day
createDistributionPlot <- function(dataset) {
# Manipulate our dataset to contain weekdays and the number of projects that
# became successful that were launched on those weekdays
dataset <- select(dataset, goal, usd.pledged) %>%
filter(!is.na(is.numeric(goal)), !is.na(is.numeric(usd.pledged)), usd.pledged > 0) %>%
mutate(percent_reached = getPercent(usd.pledged, goal)) %>%
select(percent_reached)
View(dataset)
# Build the plot based on the data set
plot <- ggplot(data = dataset, aes(dataset$percent_reached)) +
geom_histogram(binwidth = 10)
return(plot)
}
getPercent <- function(pledge, goal) {
print(paste(pledge, goal))
tmp <- as.numeric(pledge) / as.numeric(goal)
tmp <- as.integer(1000 * tmp) / 10
print(paste(tmp, typeof(tmp)))
return(tmp)
}
test <- createDistributionPlot(kickstarter)
getPercent <- function(pledge, goal) {
print(paste(pledge, goal))
tmp <- as.numeric(pledge) / as.numeric(goal)
tmp <- as.integer(1000 * tmp) / 10
if(is.na(tmp)) {
print("cat")
}
return(tmp)
}
test <- createDistributionPlot(kickstarter)
source('C:/Users/Soham/Desktop/info201/INFO_Group_Collab/scripts/renderDistributionPlot.R')
NA
as.numeric(NA)
is.na(as.numeric(NA))
getPercent <- function(pledge, goal) {
tmp <- as.numeric(pledge) / as.numeric(goal)
tmp <- as.integer(1000 * tmp) / 10
if(is.na(tmp)) {
print("cat")
}
return(tmp)
}
test <- createDistributionPlot(kickstarter)
getPercent <- function(pledge, goal) {
if(is.na(pledge) | is.na(goal)) {
print(paste(pledge, goal))
}
tmp <- as.numeric(pledge) / as.numeric(goal)
tmp <- as.integer(1000 * tmp) / 10
if(is.na(tmp)) {
print("cat")
}
return(tmp)
}
test <- createDistributionPlot(kickstarter)
getPercent <- function(pledge, goal) {
tmp <- as.numeric(pledge) / as.numeric(goal)
tmp <- as.integer(1000 * tmp) / 10
ifelse(tmp > 100, 100, tmp)
return(tmp)
}
test <- createDistributionPlot(kickstarter)
?ifelse
getPercent <- function(pledge, goal) {
tmp <- as.numeric(pledge) / as.numeric(goal)
tmp <- as.integer(1000 * tmp) / 10
print(ifelse(tmp > 100, 100, tmp))
return(tmp)
}
test <- createDistributionPlot(kickstarter)
getPercent <- function(pledge, goal) {
tmp <- as.numeric(pledge) / as.numeric(goal)
tmp <- as.integer(1000 * tmp) / 10
tmp <- ifelse(tmp > 100, 100, tmp)
tmp <- ifelse(is.na(tmp), 0, tmp)
return(tmp)
}
test <- createDistributionPlot(kickstarter)
# Manipulate our dataset to contain weekdays and the number of projects that
# became successful that were launched on those weekdays
dataset <- select(dataset, goal, usd.pledged) %>%
filter(!is.na(is.numeric(goal)), !is.na(is.numeric(usd.pledged))) %>%
mutate(percent_reached = getPercent(usd.pledged, goal)) %>%
select(percent_reached) %>%
filter(percent_reached > 0)
# createSuccessPlot returns a plot based on the given dataset and the queried day
createDistributionPlot <- function(dataset) {
# Manipulate our dataset to contain weekdays and the number of projects that
# became successful that were launched on those weekdays
dataset <- select(dataset, goal, usd.pledged) %>%
filter(!is.na(is.numeric(goal)), !is.na(is.numeric(usd.pledged))) %>%
mutate(percent_reached = getPercent(usd.pledged, goal)) %>%
select(percent_reached) %>%
filter(percent_reached > 0)
View(dataset)
# Build the plot based on the data set
plot <- ggplot(data = dataset, aes(dataset$percent_reached)) +
geom_histogram(binwidth = 10)
return(plot)
}
getPercent <- function(pledge, goal) {
tmp <- as.numeric(pledge) / as.numeric(goal)
tmp <- as.integer(1000 * tmp) / 10
tmp <- ifelse(tmp > 100, 100, tmp)
tmp <- ifelse(is.na(tmp), 0, tmp)
return(tmp)
}
kickstarter <- read.csv(file="./data/ks-projects-201612.csv",
stringsAsFactors = FALSE)
test <- createDistributionPlot(kickstarter)
# createSuccessPlot returns a plot based on the given dataset and the queried day
createDistributionPlot <- function(dataset) {
# Manipulate our dataset to contain weekdays and the number of projects that
# became successful that were launched on those weekdays
dataset <- select(dataset, goal, usd.pledged) %>%
filter(!is.na(is.numeric(goal)) & !is.na(is.numeric(usd.pledged))) %>%
mutate(percent_reached = getPercent(usd.pledged, goal)) %>%
select(percent_reached) %>%
filter(percent_reached > 0)
# Build the plot based on the data set
plot <- ggplot(data = dataset, aes(dataset$percent_reached)) +
geom_histogram(binwidth = 10)
return(plot)
}
getPercent <- function(pledge, goal) {
tmp <- as.numeric(pledge) / as.numeric(goal)
tmp <- as.integer(1000 * tmp) / 10
tmp <- ifelse(tmp > 100, 100, tmp)
tmp <- ifelse(is.na(tmp), 0, tmp)
return(tmp)
}
test <- createDistributionPlot(kickstarter)
# createSuccessPlot returns a plot based on the given dataset and the queried day
createDistributionPlot <- function(dataset) {
# Manipulate our dataset to contain weekdays and the number of projects that
# became successful that were launched on those weekdays
dataset <- select(dataset, goal, usd.pledged) %>%
filter(!is.na(is.numeric(goal)) & !is.na(is.numeric(usd.pledged))) %>%
mutate(percent_reached = getPercent(usd.pledged, goal)) %>%
select(percent_reached) %>%
filter(percent_reached > 0)
# Build the plot based on the data set
plot <- ggplot(dataset, aes(x = percent_reached)) +
geom_histogram(binwidth = 10)
return(plot)
}
getPercent <- function(pledge, goal) {
tmp <- as.numeric(pledge) / as.numeric(goal)
tmp <- as.integer(1000 * tmp) / 10
tmp <- ifelse(tmp > 100, 100, tmp)
tmp <- ifelse(is.na(tmp), 0, tmp)
return(tmp)
}
test <- createDistributionPlot(kickstarter)
test
source('C:/Users/Soham/Desktop/info201/INFO_Group_Collab/scripts/renderDistributionPlot.R')
test <- createDistributionPlot(kickstarter)
test
source('C:/Users/Soham/Desktop/info201/INFO_Group_Collab/scripts/renderDistributionPlot.R')
source('C:/Users/Soham/Desktop/info201/INFO_Group_Collab/scripts/renderDistributionPlot.R', echo=TRUE)
source('C:/Users/Soham/Desktop/info201/INFO_Group_Collab/scripts/renderDistributionPlot.R')
test <- createDistributionPlot(kickstarter)
test
getPercent <- function(pledge, goal) {
tmp <- as.numeric(pledge) / as.numeric(goal)
tmp <- as.integer(1000 * tmp) / 10
#tmp <- ifelse(tmp > 100, 100, tmp)
tmp <- ifelse(is.na(tmp), 0, tmp)
return(tmp)
}
test <- createDistributionPlot(kickstarter)
test
shiny::runApp()
View(kickstarter)
runApp()
runApp()
runApp()
runApp()
runApp()
# createSuccessPlot returns a plot based on the given dataset and the queried day
createDistributionPlot <- function(dataset, selection) {
# Manipulate our dataset to contain weekdays and the number of projects that
# became successful that were launched on those weekdays
dataset <- select(dataset, goal, usd.pledged) %>%
filter(!is.na(is.numeric(goal)) & !is.na(is.numeric(usd.pledged))) %>%
mutate(percent_reached = getPercent(usd.pledged, goal)) %>%
select(percent_reached)
# Build the plot based on the data set
plot <- p <- plot_ly(x = dataset$percent_reached, type = "histogram")
return(plot)
}
getPercent <- function(pledge, goal) {
tmp <- as.numeric(pledge) / as.numeric(goal)
tmp <- as.integer(1000 * tmp) / 10
tmp <- ifelse(tmp > 100, 100, tmp)
tmp <- ifelse(is.na(tmp), 0, tmp)
return(tmp)
}
test <- createDistributionPlot(kickstarter)
test
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
