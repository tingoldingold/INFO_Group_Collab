dep_delay_by_month
# Which month had the greatest average departure delay?
filter(dep_delay_by_month, delay == max(delay)) %>% select(month)
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create
# a scatterplot by passing that data frame to the 'plot()' function
plot(dep_delay_by_month)
arr_delay_by_month <- flights %>% group_by(dest) %>% summarise(delay = mean(arr_delay, na.rm=TRUE)) %>% arrange(-delay)
head(arr_delay_by_month)
avg_delay <- flights %>% group_by(dest) %>% summarise(delay = mean(arr_delay, na.rm=TRUE)) %>% arrange(-delay)
head(avg_delay)
# You can look up these airports in the `airports` data frame!
# Which city was flown to with the highest average speed?
highest_avg_speed <- flights %>%
mutate(speed = distance/air_time * 60) %>%
group_by(dest) %>%
summarise(avg_speed = mean(speed, na.rm = TRUE)) %>%
filter(avg_speed == max(avg_speed, na.rm = TRUE))
library(httr)
library(jsonlite)
library(dplyr)
# Create a variable for the API's base URI (https://api.github.com)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API,
# find the endpoint that will list repos in an organization. Then,
# Create a variable `resource` that stores the endpoint for the "info201"
# organization repos (this is the PATH to the resource of interest).
# (FYI: this is where we keep the book code and master exercise sets!)
resource <- "orgs/info201/repos"
GET(paste0(base_uri, resource))
# Under the "Repositories" category of the API,
# find the endpoint that will list repos in an organization. Then,
# Create a variable `resource` that stores the endpoint for the "info201"
# organization repos (this is the PATH to the resource of interest).
# (FYI: this is where we keep the book code and master exercise sets!)
resource <- "/orgs/info201/repos"
# Send a GET request to this endpoint (the `base_uri`` followed by `resource`)
GET(paste0(base_uri, resource))
result <- GET(paste0(base_uri, resource))
# Extract the "text" of the response usin the `content` function
text <- content(result, "text")
# Convert the body from JSON into a data frame
body <- fromJSON(text)
# How many (public) repositories does the organization have?
repos <- nrow(body)
repos
ce <- "/search/repositories"
# You will need to specify some query parameters. Create a `query_params` list
# variable that specifies an appropriate key and value for the search term and
# the language
query_params <- list(q = "graphics")
# Send a GET request to this endpoint--including your params list as the `query`
result
# Extract the response body and convert it from JSON.
json <- fromJSON(content(result2, "text"))
# Send a GET request to this endpoint--including your params list as the `query`
result2 <- GET(paste0(base_uri, resource), query_params)
# Extract the response body and convert it from JSON.
json <- fromJSON(content(result2, "text"))
colnames(json)
bod <- content(result2, "text")
json <- fromJSON(bod)
colnames(bod)
query_params <- list(q = "graphics+language:R")
# Send a GET request to this endpoint--including your params list as the `query`
response <- GET(paste0(base_uri, resource), query = query_params)
# Extract the response body and convert it from JSON.
body <- content(response, "text")
results <- fromJSON(body)
# How many search repos did your search find? (Hint: check the list names)
print(results$total_count)
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
install.packages("ggplot2")
library(ggplot2)
library(dplyr)
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
?diamonds
colnames(diamonds)
nrow(diamonds)
?sample_n
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamond_sample <- sample_n(diamonds, 1000)
nrow(diamond_sample)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(diamond_sample)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data=diamond_sample)
ggplot(data=diamond_sample) +
geom_point(mapping = aes(x = carat, y = price))
ggplot(data=diamond_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data=diamond_sample) +
geom_point(mapping = aes(x = carat, y = price, color = class))
ggplot(data=diamond_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data=diamond_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data=diamond) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data=diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data=diamond_sample) +
geom_point(mapping = aes(x = price, y = carat, color = "blue"))
ggplot(data=diamond_sample) +
geom_point(mapping = aes(x = price, y = carat), color = "blue")
colnames(diamond_sample)
ggplot(data=diamond_sample) +
geom_point(mapping = aes(x = price, y = carat, shape = cut))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price))
ggplot(data = diamond_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price))
ggplot(data = diamond_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price, color = price))
# Exercise 2: advanced ggplot2 practice
# Install and load the `ggplot2` package
#install.packages('ggplot2')
library(ggplot2)
# For this exercise you will again be working with the `diamonds` data set.
# Use `?diamonds` to review details about this data set
?diamonds
## Statistical Transformations
# Draw a bar chart of the diamonds data, organized by cut
# Each bar's height is based on the "count" (number) of diamonds with that cut
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
# Use the `stat_count` to apply the statistical transformation "count" to the
# diamonds by cut. You do not need a separate geometry layer!
# Use the `stat_summary` function to draw a chart with a summary layer.
# Map the x-position to diamond `cut`, and the y-position to diamond `depth`
# Bonus: use `min` as the function ymin, `max` as the function ymax, and `median`
# as the function y
## Position Adjustments
# Draw a bar chart of diamonds organized by cut, with each bar filled by clarity.
# You should see a _stacked_ bar chart.
# Draw the same chart again, but with each element positioned to "fill" the y axis
# Draw the same chart again, but with each element positioned to "dodge" each other
# Draw a plot with point geometry with the x-position mapped to `cut` and the
# y-position mapped to `clarity`
# This creates a "grid" grouping the points
# Use the "jitter" position adjustment to keep the points from all overlapping!
# (This works a little better with a sample of diamond data, such as from the
# previous exercise).
## Scales
# Draw a "boxplot" (with `geom_boxplot`) for the diamond's price (y) by color (x)
# This has a lot of outliers, making it harder to read. To fix this, draw the
# same plot but with a _logarithmic_ scale for the y axis.
# For another version, draw the same plot but with `violin` geometry instead of
# `boxplot` geometry!
# How does the logarithmic scale change the data presentation?
# Another interesting plot: draw a plot of the diamonds price (y) by carat (x),
# using a heatmap of 2d bins (geom_bin2d)
# What happens when you make the x and y channels scale logarithmically?
# Draw a scatter plot for the diamonds price (y) by carat (x). Color each point
# by the clarity (Remember, this will take a while. Use a sample of the diamonds
# for faster results)
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
## Coordinate Systems
# Draw a bar chart with x-position and fill color BOTH mapped to cut
# For best results, SET the `width` of the geometry to be 1 (fill plot, no space
# between)
# TIP: You can save the plot to a variable for easier modifications
# Draw the same chart, but with the coordinate system flipped
# Draw the same chart, but in a polar coordinate system. It's a Coxcomb chart!
## Facets
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
## Saving Plots
# Use the `ggsave()` function to save the current (recent) plot to disk.
# Name the output file "my-plot.png".
# Make sure you've set the working directory!!
# diamonds by cut. You do not need a separate geometry layer!
ggplot(data = diamonds) +
stat_count(mapping = aes(x = cut))
colnames(diamonds)
ggplot(data = diamonds) +
stat_summary(mapping = aes(x = cut, y = depth))
# diamonds by cut. You do not need a separate geometry layer!
ggplot(data = diamonds) +
stat_summary(mapping = aes(x = cut, y = depth),
fun.ymin = min, fun.ymax = max, fun.y = median)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, color = clarity))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity), position = "fill")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity), position = "dodge")
ggplot(data = diamonds) +
geom_point(mapping = aes(x = cut, y = clarity))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = cut, y = clarity), postition = "jitter")
ggplot(data = diamonds) +
geom_point(mapping = aes(x = cut, y = clarity), position = "jitter")
ggplot(data = diamonds) +
geom_boxplot(mapping = aes(x = color, y = price))
ggplot(data = diamonds) +
geom_boxplot(mapping = aes(x = color, y = price)) +
scale_y_log10()
ggplot(data = diamonds) +
geom_violin(mapping = aes(x = color, y = price)) +
scale_y_log10()
shiny::runApp('Documents/INFO201/INFO_Group_Collab')
runApp('Documents/INFO201/INFO_Group_Collab')
runApp('Documents/INFO201/INFO_Group_Collab')
runApp('Documents/INFO201/INFO_Group_Collab')
runApp('Documents/INFO201/INFO_Group_Collab')
setwd("~/Documents/INFO201/INFO_Group_Collab")
shiny::runApp()
deployApp()
shiny::deployApp()
library(rsconnect)
deployApp()
#---- UI File
#---- Libraries
library(shiny)
library(plotly)
library(shinythemes)
library(dplyr)
#---- Start UI
shinyUI(navbarPage(
theme = shinytheme("journal"),
img(src = "./imgs/logo.png", height = 25, length = 120),
tabPanel(
"Home",
tags$h1("All About Crowdfunding for Creativity"),
sidebarLayout(
sidebarPanel(
tags$h2("Authors"),
tags$div(
class = "para_one", checked = NA,
tags$h3("Tristan Ingold"),
tags$p("Tristan is a Business Student currently pursing an
Information Systems option while concurrently pursing an
Informatics Minor. His main interest are in Data Analytics
and Visualization."),
tags$a(href="mailto:tingold1997@gmail.com", "Email Tristan!"),
tags$h3("Maegan Nevalsky"),
tags$p("Maegan is a Junior at the University of Washington studying
Computer Science."),
tags$a(href="mailto:maegann@uw.edu ", "Email Maegan!"),
tags$h3("Soham Pardeshi"),
tags$p("Soham Pardeshi is a Philosophy student at the University
of Washington. He aims to purse the study of the
epistemological overlap between human intelligence and
artificial intelligence."),
tags$a(href="mailto:spard@uw.edu", "Email Soham!"),
tags$h3("Estelle Jiang"),
tags$p("Estelle is a designer who has enthusiastic about
interaction and experience. She is currently a junior
at the University of Washington pursuing, majoring in
Informatics - Human Computer Interaction track. "),
tags$a(href="mailto:yichej@uw.edu","Email Estelle!")
)
),
mainPanel(
tags$div(
class = "page_one_about", checked = NA,
tags$h3("What is Kickstarter"),
tags$p("Kickstarter is a funding platform for everything from film, to
gaming, to music, art, and design. They try to host the most
innovative and imaginative ideas that are brought to life by
their users. Everything on Kickstarter must be a project with a
clear goal, like making an album, a book, or a work of art. A
project will eventually be completed, and something will be
produced by it."),
tags$h3("Basics for Kickstarter"),
tags$p("A project is a finite work with a clear goal that you’d like
to bring to life. Think albums, books, or films. The funding
goal is the amount of money that a creator needs to complete
their project. Funding on Kickstarter is all-or-nothing. No one
will be charged for a pledge towards a project unless it
reaches its funding goal. This way, creators always have the
budget they scoped out before moving forward. A creator is the
person or team behind the project idea, working to bring it to
life. Backers are folks who pledge money to join creators in
bringing projects to life. Rewards are a creator's chance to
share a piece of their project with their backer community.
Typically, these are one-of-a-kind experiences, limited
editions, or copies of the creative work being produced."),
tags$h3("Who is our audience?"),
tags$p("The size and popularity of the platform means that the website
gets traffic from many different people but there are two
groups in particular that serve as the main audiences: Backers
and Entrepreneurs. Although, the data we will present will be
relevant to the entrepreneurs, our main target audience for
this project will be the Backers. In More detail, these are
the people that search this site funding projects they like and
think will be successful. Backers are offered rewards in terms
of prizes, money and ownership in return for their monetary
support. Unfortunately, only about 44% of these projects will
be successful. Our aim will be to offer insights and tips into
what makes a successful Kickstarter project that which will
prove to be most beneficial to potential Backers. "),
tags$h3("Backers?"),
tags$p("Many backers are rallying around their friends' projects. Some
are supporting a new effort from someone they've long admired.
Some are just inspired by a new idea, while others are
motivated to pledge by a project's rewards — a copy of what's
being produced, a limited edition, or a custom experience
related to the project. Backing a project is more than just
pledging funds to a creator. It's pledging your support to a
creative idea that you want to see exist in the world. The
majority of initial funding usually comes from the fans and
friends of each project. If they like it, they'll spread the
word to their friends, and so on. Press, blogs, Twitter,
Facebook, and Kickstarter itself are also big sources of
traffic and pledges. Altogether, millions of people visit
Kickstarter every week.")
),
tags$link(
rel = "stylesheet", type = "text/css",
href = "style.css")
),
position = "right"
)
),
# Tab one: Category Analysis
tabPanel(
"Category Analysis",
tags$h1("Analyzing Kickstarter's Main Categories"),
sidebarLayout(
sidebarPanel(
tags$h2("Tell us your most interested category."),
selectInput(
"main_category",
label = "Choose a main category",
choices = list("Art", "Comics",
"Crafts", "Dance", "Design", "Fashion", "Film & Video",
"Food", "Games", "Journalism", "Music", "Photography",
"Publishing", "Technology")
)),
mainPanel(
plotlyOutput("category_plot"),
tags$p(class = "succ_summary", "In this text area will be much more
explanation about the graphs and the conclusions that we can draw from them. ")
)
)
),
# Tab two: Money Peldged
tabPanel(
"Money Pledged",
tags$h1("How much money is pledged?"),
sidebarLayout(
sidebarPanel(
tags$h2("Filters"),
selectInput("category", label = h3("Select Category"),
choices = list("Film & Video"="Film & Video",
"Music"="Music",
"Publishing"="Publishing", "Games"="Games",
"Technology"="Technology", "Art"="Art",
"Design"="Design", "Food"="Food",
"Fashion"="Fashion",
"Theater"="Theater",
"Photography"="Photography",
"Comics"="Comics", "Crafts"="Crafts",
"Journalism"="Journalism",
"Dance"="Dance"),
selected = "Film & Video"),
sliderInput("goalRange", label = h3("Goal Range"), min = 0,
max = 1000000, value = c(0, 500000), step = 5000),
sliderInput("pledgedRange", label = h3("Pledged Range"), min = 0,
max = 1000000, value = c(0, 500000), step = 5000)
),
mainPanel(
plotOutput("plot_money"),
tags$p("This plot shows trends between the target fundraising amount
of the project incomparison to the actual amount raised. The
plots can be adjusted based on the min and max amounts for
either axis in order to see trends for projects in a similar
price range to your potential project."),
tags$p("The projects that lie along the bottom of the graph are likely
the ones that did not succeed because they did not meet their
fundraising goal. In most categories, there is a trendline at a
slope of 1 because many projects raise just over their goal. As
the goal amount gets higher, there are not many projects that
fall just short of the goal, most of them either reach the goal
or don't come close.")
)
)
),
# Tab three: Success Statistics
tabPanel(
"Success Statistics",
fluidRow(
column(10, offset = 1,
tags$h2("Status of Projects by Catagory"),
plotOutput("sucess_plot_1", height = 600),
tags$p(class = "succ_summary", "As mentioned ealrier in the analysis,
only about ", strong("40% "), "of projects acutally reach their
funding goal and can be started. Kickstarter works on an
\"All-orNothing\" protocal which means there is little risk for
a Backer looking to get involved in new, creative, and
seemingly low-ball projects. However, if you are a serious
Backer looking to fund projects that will have great sucess and
bring you benefits in the long run, it is worth noting which
projects have the highest sucess averages.", br(), br(),
strong("Key takeaways from this graph: "), br(), "It is
important to notice that Theatre, Dance and Comics have high
success rates, these projects are often put together by good
knowledgable producers, writers, and actors/dancer. However,
these projects may be harder to come by, and because volume in
these categories is so low, if you are a Backer that likes to
find a project that aligns well with their interest, it may be
hard to find your niche. Categories such as Fashion, Games and
Technology will have much higher volumes of projects and will
more appropiately satisfy niche creative demands but the
likelyhood of failure is much higher. There are trade-offs to
being a Backer for different types of projects. We recommend
trying to find projects that interest you in categories of both
high and low success. ")
)
),
tags$hr(),
fluidRow(
column(10, offset = 1,
tags$h2("Dollars Pledged to Successful
Projects in the United States"),
plotOutput("sucess_plot_2"),
tags$p(class = "succ_summary", "As we talked about earlier there is
quite a discrepancy created around the sucess of projects when
one considers the volume that these projects bring in. ",
strong("When only considering projects that are sucessful, "),
"the technology and gaming sectors bring in upwards of $15
million. Notice also that those same categories from above that
enjoyed high success rates are bringing in fractions of that,
with Theatre bringing in under only $1 million dollars in
pledges from Backers.", br(), br(), strong("Key takeaways from
this graph: "), br(), "As a Backer it is extremely important
that you think about what kind of Backer you
want to be. Ask yourself: \"What do I want my return on
investment to look like?\" If you are a casual Backer than
relax and find the project that speaks best to you no matter
the category. On the other hand, if you came to Kickstarter
with the intention of making a significant amount of profit
than really consider what sector you want to go into.
Technology, Gaming and Design have sufficient enough volume in
successful projects to satisfy the the need for greater
returns. This is in part due to the fact that higher profile
projects are established in these categories. Think of
significant return on investment from high profile companies
and you will end end talking about the likes of Oculus,
Elevation Lab, and Bragi to name a few.")
)
),
tags$hr(),
fluidRow(
column(10, offset = 1,
tags$h2("Number of Backers by Category"),
plotOutput("sucess_plot_3"),
tags$p(class = "succ_summary", "Here is a graph about the Backers, by
the Backers, for the Backer. Of course, all of these graphs
have been constructed to give Backers insight into certain
factors about the sucess of projects in different categories.
However, this one maps out just how many backers are attracted
to project that end up seeing success. There is no surprise
here that because of the volume of projects described earlier
there are noteworthy spikes in the Technology, Gaming, and
Design. However there are some interesting spikes that occur
elsewhere in the graph.", br(), br(), strong("Key takeaways
from this graph"),
br(), "Film and Video, Music, and Publishing are not to be
ignored. All three of the categories, although not bringing in
over a million backers, still bring in over 250,000 Backers per
year. This shows that they are producing a relatively popular
product offering and taking the time to look up projects in
those categories might be a fruitful endeavor. Another
observation gathered by this graph is the fact that Fashion is
the only category that displays a relative decrease between
money pledged and Backers supporting. This could be due to the
fact that fashion is an market with high entry barriers which
more commonly suits entry through expensive designer goods. It
could also be attributed to a relatively low success rate.
Whatever the cause may be, as a Backer it would be wise to look
at that category as an area in which one can incur more
incentives, ROI, or even ownership because of a low volume of
Backers. ")
)
)
),
# Tab four: Distributions
tabPanel(
"Distributions",
tags$h1("What is Kickstater?"),
sidebarLayout(
sidebarPanel(
# Make a list of checkboxes
radioButtons("selection", label = h3("Choose metric..."),
choices = list("Test 1" = 1, "Test 2" = 2)
)
),
mainPanel(
plotlyOutput("plot_distribution")
)
)
)
)
)
deployApp()
